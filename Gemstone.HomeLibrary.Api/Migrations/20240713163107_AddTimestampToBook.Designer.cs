// <auto-generated />
using System;
using Gemstone.HomeLibrary.Api.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gemstone.HomeLibrary.Api.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240713163107_AddTimestampToBook")]
    partial class AddTimestampToBook
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Gemstone.HomeLibrary.Api.Models.HomeLibrary.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenLibraryKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonalName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Gemstone.HomeLibrary.Api.Models.HomeLibrary.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Isbn10")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Isbn13")
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenLibraryKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Pages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublishDate")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Gemstone.HomeLibrary.Api.Models.HomeLibrary.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("Gemstone.HomeLibrary.Api.Models.HomeLibrary.ReadBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("ReadBooks");
                });

            modelBuilder.Entity("Gemstone.HomeLibrary.Api.Models.HomeLibrary.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Gemstone.HomeLibrary.Api.Models.HomeLibrary.Author", b =>
                {
                    b.HasOne("Gemstone.HomeLibrary.Api.Models.HomeLibrary.Book", null)
                        .WithMany("Authors")
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("Gemstone.HomeLibrary.Api.Models.HomeLibrary.Publisher", b =>
                {
                    b.HasOne("Gemstone.HomeLibrary.Api.Models.HomeLibrary.Book", null)
                        .WithMany("Publishers")
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("Gemstone.HomeLibrary.Api.Models.HomeLibrary.ReadBook", b =>
                {
                    b.HasOne("Gemstone.HomeLibrary.Api.Models.HomeLibrary.Book", "Book")
                        .WithMany("Readings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gemstone.HomeLibrary.Api.Models.HomeLibrary.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gemstone.HomeLibrary.Api.Models.HomeLibrary.Book", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Publishers");

                    b.Navigation("Readings");
                });
#pragma warning restore 612, 618
        }
    }
}
